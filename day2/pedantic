#!/usr/bin/bash 

# ^^^ the shebang --- "Hey OS, use the bash interpreter!"

# --- TOP --- 
# See ${verbose}
# -----------


#
# --- Usage function ---
# 1) Syntax --- func_name() { ... } 
# 2) Function is called as: func_name arg1 arg2 ...
#

verbose="
--- pedantic ---
\n
\nA demonstrative script that shows some of the basic 
\nworkings of bash scripting. This is not all inclusive.
\n
\nThe actual functionality of the script answers the
\nfollowing question: Can you check how many sockets 
\n(according to the netstat utility) are of type \"DGRAM\"
\nevery 5 seconds? Can you output the results to a
\nfile? Can you make your script modular? 
\n
\nUsage: ./pedantic OUTFILE|-help [SECONDS] 
" ;

usage()
{
    #
    # --- Setting local variables ---
    # 1) Variable assignment within a function is same as Line ___,
    #    HOWEVER these assignments are STILL global assignments. It 
    #    doesn't even matter if the variable wasn't declared before
    #    this function is even called. It will have global scope.
    # 2) The 'local' keyword will explicitly create a local variable
    #    with the scope set to this function. Let's say "help"
    #    from below ...
    # 3) The scope of these variables will actually last until this 
    #    whole function finishes executing. The consequence? "help"
    #    will be visible to those inner, called functions.
    # 4) ^^ Tricky to get used to, bash follows dynamic scoping, which
    #    is rather uncommon in most modern languages. See more:
    #    http://prl.ccs.neu.edu/blog/2019/09/05/lexical-and-dynamic-scope/
    #
    local help=$1 ; #                     <-- '$1' here refers to the first parameter of 'usage' 


    #
    # See below on more info about if statements
    # 1)  
    #
    #
    if [[ "${help}" == "-help" ]]
    then
        echo -e ${verbose} ;
        exit 0 ; 
    elif [ -z "${help}" ] 
    then
        echo "ERROR: Usage: ./pedantic OUTFILE|-help [SECONDS]" ; 
        exit 1 ; #                        <-- See below about exit code info
    fi

    #
    # Bash functions can't return values. Horrible. Instead, 
    #
}


#
# --- Preliminary ---
# Call 'usage' to sanity check some inputs
#
usage $1 ; #               <-- Passing the script's first argument as the first
           #                   argument to the 'usage' function



# 
# --- Set script variables ---
# 1) $1, $2, ... : The arguments to the script
# 2) $_ : The last argument
# 3) $# : The number of aruguments
#
OUT=$1 ; #                 <-- Variable assignment is "pythonic" ; "OUT" is the var name
         #                 <-- BEWARE --- don't leave spaces around the "=", bash won't recognize
         #                     the assignment properly

# 1) Setting the TIME variable to either the
#    optional second input or 1 (for 1s). The
#    parameter is vetted to be an integer using
#    a regular expression statement
# 2) Regular expression in ' [[ "$2" =~ ^[0-9]+$ ]] '
#    checks of the second argument is a number of 
#    any kind --- '^' denotes pattern matching at
#    the start of the string, '$' denotes through
#    the end of the string. '[ - ]' represents a 
#    a range of possible values, and '+' is the 
#    repitition token. In other words, This 
#    statement will return true if the string is
#    a repitition of any digit from 0-9. the '=~'
#    operator in the ' [[ ]] ' evaluator allows
#    for regular expression matches
if [ -z "$2" ] ; then 
    TIME=1 ;
elif ! [[ "$2" =~ ^[1-9][0-9]*$ ]] ; then
    echo "ERROR: SECONDS parameter must be an positive integer" ;
    exit 1 ; 
else 
    TIME="$2" ;
fi



#
# --- If Statements ---
# See more info about if statements in 'usage'
#
# 1) [ ] denotes the "test" command ... really.
#    - '[' is an alias for the "test" utility, and ']'
#      is a marker to end args passed to "test"
#    - Using [ ] is usually a shortcut
#
# 2) " if test -z ${OUT} " checks if the variable
#    OUT was empty (-z for zero length).
#
#    " if test -f ${OUT} " checks if a file of name
#    OUT already exists.
#
# 3) Important to note that ${ } is used for
#    parameter expansion. It's safe to refer to
#    non-single-character-variables using ${}
#    as you see in ${OUT}
#
# 4) if statements in bash have the following format:
#    
#    if COND ; then         <-- Need a ' ; then ' (or 'then' on a newline without a ';') 
#       BODY
#    elif COND ; then       <-- Another condition (the else if) denoted as 'elif'
#       BODY
#    else                   <-- Else case does not require a ' ; then '
#       BODY
#    fi                     <-- 'fi' Required to end the if statement
#   
#
# Don't output to an already existing file 
#
if [ -f "${OUT}" ] ; then #                     <-- "${OUT}" to group potentially spaced filenames as one (using quotes) 
    echo "ERROR: ${OUT} already exists" ; 
    exit 1 ; #                                  <-- Error code of 1 upon process termination 
fi


#
# Create the file OUT
#
touch "${OUT}" ;

#
# --- Loops ---
# 1) while loops in bash have the following format:
#
#    while COND ; do        <-- Need a ' ; do ' (or 'do' on a newline without a ';')
#       BODY
#    done                   <-- 'done' required to end the while loop 
#
# 2) for loops in bash have the following format:
#
#    for ITEM in LISTRANGE ; do        <-- Need a ' ; do ' (or 'do' on a newline without a ';')
#       BODY
#    done                              <-- 'done' required to end the for loop 
# 
# Loop infinitely until someone interrupts the 
# program and kills it via ctrl-c
#
echo "Recording ... CTRL+C to exit" ;
while true ; do                                       
    netstat | grep "DGRAM" | wc -l >> "${OUT}" ;
    sleep ${TIME}s ; 
done



# 
# Finishing ...
#
exit 0 ; #                  <-- Being pedantic about return values/exit codes 
